spring:
  jpa:
    hibernate:
      ddl-auto: create-drop # TODO: Temporary
    show-sql: true
  datasource:
    url: jdbc:mysql://localhost:3306/reservatio
    username: reservatio
    password: reservatio
    hikari:
      initialization-fail-timeout: -1
  data:
    rest:
      base-path: /rest
reservatio:
  minio:
    endpoint: http://localhost:9000
    username: reservatio
    password: reservatio
    bucket: reservatio
    bucketPolicy: |
      {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Principal": {
              "AWS": [
                "*"
              ]
            },
            "Action": [
              "s3:ListBucket",
              "s3:GetBucketLocation"
            ],
            "Resource": [
              "arn:aws:s3:::${reservatio.minio.bucket}"
            ]
          },
          {
            "Effect": "Allow",
            "Principal": {
              "AWS": [
                "*"
              ]
            },
            "Action": [
              "s3:GetObject"
            ],
            "Resource": [
              "arn:aws:s3:::${reservatio.minio.bucket}/*"
            ]
          }
        ]
      }
  keycloak:
    server-url: ${keycloak.auth-server-url}
    username: reservatio
    password: reservatio
    realm: ${keycloak.realm}
    client-id: ${keycloak.resource}
keycloak:
  auth-server-url: http://localhost:8180/auth
  public-client: true
  realm: reservatio
  resource: reservatio
  security-constraints:
    - security-collections:
        - patterns:
            - /register-customer
    - auth-roles:
        - admin
      security-collections:
        - patterns:
            - /*
    - auth-roles:
        - customer
      security-collections:
        - patterns:
            - /rest/customer/*
    - auth-roles:
        - service_provider
      security-collections:
        - patterns:
            - /rest/service-provider/*
